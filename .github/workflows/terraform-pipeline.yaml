---
name:   provision aws resources with terraform Deployment
on:
  push:
    branches:
    # - main
      - cicd-pipeline      # specifies the branch where the job will run on

# schedule:
#  - cron: "0 21 * * 4"

jobs:
  terraform_job:
    name: Deploy aws resources with terraform
    runs-on: ubuntu-latest
    steps:
    
    # Pulls the latest version of your source code from the GitHub repository
    - name: checkout code 
      uses: actions/checkout@v3 

    # Installs Terraform on the GitHub runner
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3

    # name: Checkout Terraform  code on runner env
    # uses: actions/checkout@v3.5.2

    # Configures your AWS access by using the credentials stored in GitHub Secrets
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${ { secrets.AWS_ACCESS_KEY_ID } }
        aws-secret-access-key: ${ { secrets.AWS_SECRET_ACCESS_KEY } }
        aws-region: "eu-west-1"

  # Initialize terraform
    - name: Initialize Terraform
      run: |
        echo "** Running Terraform Init **"
        terraform init

    # Execute the terraform plan
    - name: Terraform Plan
      run: terraform plan

        # Deploy terraform changes
    - name: Terraform Apply
      run: terraform apply -auto-approve

     # Destroy terraform resources (uncomment lines below)
      # - name: Terraform Destroy
      #   run: terraform destroy -auto-approve



 



    name: Terraform plan
    id: plan
      if: github.event_name == 'pull_request'
       run: terraform plan -no-color -input=false
       continue-on-error: true
 
    name: Terraform Apply
       if: github.ref == 'refs/heads/main' && github.event_name == 'push'
       run: terraform apply -auto-approve -input=false